#
#
# # Variances over all exposure measures ------------------------------------
#
# # get averages for all four exposure variables for each firm
# firm_means <- df |>
#   group_by(isin) |>
#   summarise(across(c(opexpo,rgexpo,phexpo), ~ mean(.x, na.rm=T))) |>
#   left_join(df |> select(isin,sic),
#             by = "isin") |>
#   left_join(sic_desc, by = "sic") |>
#   filter(!is.na(industry))
#
# # calculate variance for each variable within industries
# exposure_var <- firm_means |>
#   group_by(industry) |>
#   summarise(across(opexpo:phexpo, ~ var(.x, na.rm = TRUE))) |>
#   mutate(avg_var = rowMeans(across(opexpo:phexpo))) |>
#   arrange(-avg_var)
#
# # Only top 15 variance industries
# sic_ct <- exposure_var |>
#   arrange(-avg_var) |>
#   head(15)
#
# # Plot
# firm_means |>
#   filter(industry %in% sic_ct$industry) |>
#   mutate(industry=factor(industry, levels=sic_var$industry)) |>
#   pivot_longer(cols = 2:4, names_to = "Exposure", values_to = "value") |>
#   mutate(Variable = recode(Exposure,
#                            opexpo = "Opportunity",
#                            phexpo = "Physical",
#                            rgexpo = "Regulatory"),
#          round = round(value,digits = 2)) |>
#   ggplot(aes(y=value,x=industry)) +
#   facet_wrap(vars(Variable), nrow=1, scales = "free_x") +
#   # geom_violin() +
#   geom_boxplot(fill="darkgreen", outlier.alpha = .075) +
#   coord_flip() +
#   # viridis::scale_color_viridis(discrete = T,end = .9) +
#   # scale_shape_manual(values=c(15:18)) +
#   theme_bw() +
#   labs(y="Variance",x = "") +
#   theme(legend.position = "bottom",
#         axis.text.x=element_text(angle = 35, vjust=0.95,hjust=1))
#
# # save
# ggsave("../results/Figures/descriptives/within_industry_variances.pdf", within_industry_variances, width=11, height=8.5)
#
# ###
#
# # top 10 only
#
# # Plot
# within_industry_variances <- exposure_var |>
#   filter(industry %in% sic_ct$industry) |>
#   mutate(industry=factor(industry, levels=sic_var$industry)) |>
#   pivot_longer(cols = 2:6, names_to = "Variable", values_to = "value") |>
#   mutate(Variable = recode(Variable,
#                            opexpo = "Opportunity",
#                            phexpo = "Physical",
#                            rgexpo = "Regulatory"),
#          round = round(value,digits = 2)) |>
#   filter(!Variable %in% c("avg_var", "ccexp")) |>
#   group_by(industry) |>
#   mutate(sumv=sum(value)) |>
#   ungroup() |>
#   arrange(desc(sumv)) |>
#   head(30) |>
#   ggplot(aes(y=value,x=industry)) +
#   facet_wrap(vars(Variable), nrow=1, scales = "free_x") +
#   geom_point(size=3) +
#   coord_flip() +
#   viridis::scale_color_viridis(discrete = T,end = .9) +
#   scale_shape_manual(values=c(15:18)) +
#   theme_bw() +
#   labs(y="Variance",x = "") +
#   theme(legend.position = "bottom",
#         axis.text.x=element_text(angle = 35, vjust=0.95,hjust=1))
#
# ggsave("../results/Figures/descriptives/within_industry_variances_TOP10.pdf", within_industry_variances, width=11, height=8.5)
# End
=======
#Exposure dataset
# load data
df2 <- fread("data/02_processed/exposure_year.csv", colClasses = c("sic"="character"))
##Exposure scores for top 10 industries
#code taken from within industry descriptives
# merge
df2 <- df2 |>
# filter out empty bvd_sector
filter(bvd_sector != "") |>
# select variables we need
select(isin, year, bvd_sector, ccexp, opexpo, rgexpo, phexpo)
View(df2)
View(df2)
#calculate summary for exposure variables
datasummary((Overall = ccexpo) + (Opportunity = opexpo) + (Regulatory = rgexpo) + (Physical = phexpo) ~ bvd_sector*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 0,)
#calculate summary for exposure variables
datasummary((Overall = ccexp) + (Opportunity = opexpo) + (Regulatory = rgexpo) + (Physical = phexpo) ~ bvd_sector*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 0,)
#calculate summary for exposure variables
datasummary((Overall = ccexp) + (Opportunity = opexpo) + (Regulatory = rgexpo) + (Physical = phexpo) ~ bvd_sector*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 3,)
#calculate summary for exposure variables
datasummary((Overall = ccexp) ~ bvd_sector*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 3,)
#calculate summary for exposure variables
datasummary(Industry = bvd_sector ~ (Overall = ccexp)*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 3,)
#calculate summary for exposure variables
datasummary((Industry = bvd_sector) ~ ccexp*(Mean + SD + N),
data = df2,
title = 'Climate Change Exposure by Industry',
fmt = 3,)
rm(list=ls())
rm(list=ls())
# load packages
pacman::p_load(data.table, tidyverse, janitor, readxl, haschaR)
# prevent scientific notation
options(scipen = 999)
>>>>>>> Stashed changes
rm(list=ls())
# load packages
pacman::p_load(data.table, tidyverse, janitor, readxl, haschaR)
install.packages("BiocManager")
# load packages
pacman::p_load(data.table, tidyverse, janitor, readxl, haschaR)
# prevent scientific notation
options(scipen = 999)
setwd("C:/Users/fiona/Dropbox (Princeton)/BBH/BBH1")
if(Sys.info()["user"]=="fiona" ) {setwd("~/Dropbox (Princeton)/BBH/BBH1/")}
df <- fread("data/lobbying_df_w_directionality.csv") |>
mutate(
year_quarter = paste0(year, "_", report_quarter_code),
amount_num = as.numeric(amount_num)
)
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
# Specify covariate names
cm <- c("op_expo_ew_y" = "Opportunity Exposure",
"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"cc_expo_ew_q" = "Overall Exposure",
"ebit" = "EBIT",
"I(ebit/at)" = "EBIT/Assets",
"log_co2_l1" = "Log(Total CO2 Emissions)",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)"
)
# Specify covariate names
cm <- c("op_expo_ew_y" = "Opportunity Exposure",
"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"cc_expo_ew_q" = "Overall Exposure",
"ebit" = "EBIT",
"I(ebit/at)" = "EBIT/Assets",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)"
)
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
# Specify covariate names
cm <- c("op_expo_ew_y" = "Opportunity Exposure",
"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"ebit" = "EBIT",
"I(ebit/at)" = "EBIT/Assets",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)"
)
#Create new variable that is ebit/assets
# Create a new variable 'Ratio' by dividing 'Var1' by 'Var2'
df$ebit_at <- df$ebit / df$at
view(df$ebit_at)
# Specify covariate names
cm <- c("op_expo_ew_y" = "Opportunity Exposure",
"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"ebit" = "EBIT",
"ebit_at" = "EBIT/Assets",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)"
)
#Creat a vector of independent variables
independent_vars <- c("cc_expo_ew_y", "ebit", "ebit_at", "us_dummy", "total_lobby")
# Create an empty list to store regression model results
model_results <- list()
head(df2)
head(df)
feglm(AGR ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
pacman::p_load(data.table, tidyverse, modelsummary,
marginaleffects, kableExtra, fixest,
janitor, viridis, censReg)
feglm(AGR ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
feglm(BUD ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
feglm(ENV ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
feglm(ENG ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
#Create new variable that is ebit/assets
# Create a new variable 'Ratio' by dividing 'Var1' by 'Var2'
df$ebit_at <- df$ebit / df$at
# Specify covariate names
cm <- c("op_expo_ew_y" = "Opportunity Exposure",
"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"ebit" = "EBIT",
"ebit_at" = "EBIT/Assets",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)"
)
feglm(ENG ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + gvkey, family = "binomial", df)
feglm(ENG ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, family = "binomial", df)
feglm(AGR ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, family = "binomial", df)
feglm(BUD ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, family = "binomial", df)
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD")
# Create an empty list to store regression model results
model_results <- list()
# Define the model formula with independent variables
formula <- as.formula("dependent_vars ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y ebit + ebit_at + us_dummy + total_lobby")
# Define the model formula with independent variables
formula <- as.formula("dependent_vars ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, . ~ . - dependent_var + as.name(dep_var))
# Fit the logit regression model
model <- feglm(formula | year + industry + industry_year, family = "binomial", df2)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
head(df)
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, . ~ . - dependent_var + as.name(dep_var))
# Fit the logit regression model
model <- feglm(formula | year + industry + industry_year, family = "binomial", df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, . ~ . - dependent_var + as.name(dep_var))
# Fit the model
model <- feglm(formula | year  + industry_year, family = "binomial", df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, . ~ . - dependent_var + as.name(dep_var))
# Fit the model
model <- feglm(formula | year, family = "binomial", df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, . ~ . - dependent_var + as.name(dep_var))
# Fit the logit regression model
model <- feglm(formula | family = "binomial", df)
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(formula, as.formula(paste(paste0(dep_var, " ~ ."))))
# Fit the logit regression model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
feglm(AGR ~ cc_expo_ew_y + ebit + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, family = "binomial", df)
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
#Create new variable that is ebit/assets
# Create a new variable 'Ratio' by dividing 'Var1' by 'Var2'
df$ebit_at <- df$ebit / df$at
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD")
# Create an empty list to store regression model results
model_results <- list()
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with fixed effects, specifying the data argument
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
View(df)
View(df)
head(df)
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD")
# Create an empty list to store regression model results
model_results <- list()
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with fixed effects, specifying the data argument
model <- feglm(current_formula | year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD")
# Create an empty list to store regression model results
model_results <- list()
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Convert 'year' to a factor (assuming it's categorical)
df$year <- as.factor(df$year)
# Fit the logit regression model with 'year' as a fixed effect
model <- feglm(current_formula | year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
if(Sys.info()["user"]=="fiona" ) {setwd("~/Dropbox (Princeton)/BBH/BBH1/")}
setwd("C:/Users/fiona/Dropbox (Princeton)/BBH/BBH1")
if(Sys.info()["user"]=="fiona" ) {setwd("/Users/Dropbox (Princeton)/BBH/BBH1/")}
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
pacman::p_load(data.table, tidyverse, modelsummary,
marginaleffects, kableExtra, fixest,
janitor, viridis, censReg)
rm(list=ls())
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
#Create new variable that is ebit/assets
# Create a new variable 'Ratio' by dividing 'Var1' by 'Var2'
df$ebit_at <- df$ebit / df$at
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD")
# Create an empty list to store regression model results
model_results <- list()
# Define the model formula with independent variables
formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with 'year' as a fixed effect
model <- feglm(current_formula | year, industry, industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with 'year' as a fixed effect
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
variable_names <- names(df)
print(variable_names)
# Run the same model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- as.formula(paste(dep_var, "~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby"))
# Fit the logit regression model with 'year' as a fixed effect
model <- feglm(current_formula | year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
#Run model for first issue code (agriculture)
ag <- feglm(AGR ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby| year + industry + industry_year, family = "binomial", df)
view(ag)
ag
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD", "FOO", "MIA")
# Create an empty list to store model results
model_results <- list()
# Define the common independent variable formula
common_formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the feglm model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(common_formula, as.formula(paste(paste0(dep_var, " ~ ."))))
# Fit the feglm model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
##Placebo analysis
#Load dataset
df <- fread("data/03_final/lobbying_df_wide_reduced.csv")
#Create new variable that is ebit/assets
# Create a new variable 'Ratio' by dividing 'Var1' by 'Var2'
df$ebit_at <- df$ebit / df$at
# Ensure that 'industry' is present in the variable names
if ("industry" %in% variable_names) {
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD", "AnotherDepVar", "YetAnotherDepVar")
# Create an empty list to store model results
model_results <- list()
# Define the common independent variable formula
common_formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the feglm model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(common_formula, as.formula(paste(paste0(dep_var, " ~ ."))))
# Fit the feglm model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# View the model results for each dependent variable
for (dep_var in dependent_vars) {
cat("Model results for", dep_var, ":\n")
print(model_results[[dep_var]])
cat("\n")
}
} else {
cat("The 'industry' variable was not found in the dataframe.")
}
# Ensure that 'industry' is present in the variable names
if ("industry" %in% variable_names) {
# Create a vector of dependent variable names
dependent_vars <- c("AGR", "BUD", "FOO", "MIA")
# Create an empty list to store model results
model_results <- list()
# Define the common independent variable formula
common_formula <- as.formula("dependent ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + ebit + ebit_at + us_dummy + total_lobby")
# Run the feglm model for each dependent variable
for (dep_var in dependent_vars) {
# Update the formula with the current dependent variable
current_formula <- update(common_formula, as.formula(paste(paste0(dep_var, " ~ ."))))
# Fit the feglm model with fixed effects
model <- feglm(current_formula | year + industry + industry_year, family = binomial, data = df)
# Store the model result in the list
model_results[[dep_var]] <- summary(model)
}
# View the model results for each dependent variable
for (dep_var in dependent_vars) {
cat("Model results for", dep_var, ":\n")
print(model_results[[dep_var]])
cat("\n")
}
} else {
cat("The 'industry' variable was not found in the dataframe.")
}
