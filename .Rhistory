"rg_expo_ew_y" = "Regulatory Exposure",
"ph_expo_ew_y" = "Physical Exposure",
"op_expo_ew" = "Opportunity Exposure",
"rg_expo_ew" = "Regulatory Exposure",
"ph_expo_ew" = "Physical Exposure",
"cc_expo_ew_y" = "Overall Exposure",
"cc_expo_ew_q" = "Overall Exposure",
"ebit" = "EBIT",
"I(ebit/at)" = "EBIT/Assets",
"ebit_at" = "EBIT/Assets",
"log_co2_l1" = "Log(Total CO2 Emissions)",
"us_dummy" = "US HQ",
"total_lobby" = "Total Lobbying ($)",
"total_lobby_annual" = "Total Lobbying ($)",
"total_lobby_quarterly" = "Total Lobbying ($)"
)
modelsummary(
models
,stars = c('*' = .1, '**' = .05, '***' = .01)
#,title = 'Main Logit, Year-Industry Effects'
,coef_map = cm
,vcov = ~ year + bvdid
,gof_omit = 'AIC|BIC|Log.Lik|Std.Errors|RMSE'
# ,output = "results/tables/climate_logit_year_COMPARE.tex"
)
names(df_quarterly)
## Overall climate lobbying (DOLLARS), overall exposure for annual
models <- list(
"Old" = feols(log(CLI_dollars +1) ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, df),
"New" = feols(log(CLI_amount_annual +1) ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_annual | year + industry + industry_year, df_REV),
"New Q" = feglm(CLI_amount_quarterly ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_quarterly | year + industry + industry_year, family = "binomial", df_quarterly)
)
## Overall climate lobbying (DOLLARS), overall exposure for annual
models <- list(
"Old" = feols(log(CLI_dollars +1) ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, df),
"New" = feols(log(CLI_amount_annual +1) ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_annual | year + industry + industry_year, df_REV),
"New Q" = feglm(log(CLI_amount_quarterly+1) ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_quarterly | year + industry + industry_year, family = "binomial", df_quarterly)
)
## Overall climate lobbying (DOLLARS), overall exposure for annual
models <- list(
"Old" = feols(log(CLI_dollars +1) ~ op_expo_ew_y + rg_expo_ew_y + ph_expo_ew_y + I(ebit/at) + us_dummy + total_lobby | year + industry + industry_year, df),
"New" = feols(log(CLI_amount_annual +1) ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_annual | year + industry + industry_year, df_REV),
"New Q" = feols(log(CLI_amount_quarterly+1) ~ op_expo_ew + rg_expo_ew + ph_expo_ew + ebit_at + us_dummy + total_lobby_quarterly | year + industry + industry_year, family = "binomial", df_quarterly)
)
modelsummary(
models
,stars = c('*' = .1, '**' = .05, '***' = .01)
#,title = 'Effect of Climate Change Attention on Lobbying on Climate Issues'
,coef_map = cm
,vcov = ~ year + bvdid
,gof_omit = 'AIC|BIC|Log.Lik|Std.Errors|RMSE'
# ,output = "results/tables/climate_ols_dollars_year_COMPARE.tex"
)
foreign <- df_REV |> filter(us_dummy == 0) |> select(CLI_annual)
View(foreign)
table(foreign$CLI_annual)
names(df_REV)
# load packages
pacman::p_load(data.table, tidyverse, haven)
# load lobbying data
lobby_client <- fread("data/01_raw/lobbyview/dataset___client_level.csv")
rm(list=ls())
# load packages
pacman::p_load(data.table, tidyverse, haven)
# set working directory
if(Sys.info()["user"]=="vincentheddesheimer" ) {setwd("~/Dropbox (Princeton)/BBH/BBH1")}
if(Sys.info()["user"]=="christianbaehr" ) {setwd("/Users/christianbaehr/Dropbox/BBH/BBH1/")}
# load lobbying data
lobby_client <- fread("data/01_raw/lobbyview/dataset___client_level.csv")
lobby_text <- fread("data/01_raw/lobbyview/dataset___issue_text.csv")
lobby_issue <- fread("data/01_raw/lobbyview/dataset___issue_level.csv")
lobby_report <- fread("data/01_raw/lobbyview/dataset___report_level.csv")
lobby_report$n_quarters <- str_count(as.character(lobby_report$report_quarter_code), "")
#####
## remove nuisance characters
lobby_issue$gov_entity <- gsub('"|\\{|\\}|([\\])|-', ' ', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub(',', ';', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub("\\s+", " ", lobby_issue$gov_entity) # remove redundant spaces
lobby_issue$gov_entity <- trimws(lobby_issue$gov_entity)
## remove special escape characters
lobby_text$issue_text <- gsub("[^A-z0-9. ]", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("`|\\^|\\[|\\]|\\\\|_", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("\\s+", " ", lobby_text$issue_text) # remove redundant spaces
lobby_issuetext <- merge(lobby_issue, lobby_text)
## sometimes multiple issue codes or government entities per lobby report
#View(lobby_issue[duplicated(lobby_issue$report_uuid) | duplicated(lobby_issue$report_uuid, fromLast = T),])
lobby_issuetext_nodup <- aggregate(lobby_issuetext[, c("issue_code", "gov_entity", "issue_text")],
by=list(lobby_issuetext$report_uuid),
FUN=function(x) paste(x, collapse = ";")) |>
setNames(c("report_uuid", "issue_code", "gov_entity", "issue_text"))
#####
lobbying <- merge(lobby_report, lobby_issuetext_nodup, all.x = T)
lobbying <- merge(lobbying, lobby_client, by = "client_uuid", all.x = T)
lobbying$report_quarter_code <- as.character(lobbying$report_quarter_code)
lobbying$amount <- gsub("\\$|,", "", lobbying$amount)
## we match with firm data based on BvDID, so all clients under the same bvdid are assigned a consistent name
## here I want to collapse the lobbying data to the FIRM-year level - which would mean no duplication of client_uuid-year-bvdid (remove client_uuid)
## just treat lobbying amount as zero if missing -> wont affect the amount calculations, because
## missing would just be dropped. But makes the mapply easier
lobbying$amount[which(lobbying$amount=="")] <- 0
lobbying$gov_entity[lobbying$gov_entity==""] <- NA
# collapse.char <- aggregate(lobbying[, c("client_uuid", "client_name", "report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
#                   by=list(lobbying$report_year, lobbying$bvdid),
#                   FUN = function(x) paste(x, collapse = "|"))
collapse.char <- aggregate(lobbying[, c("report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
by=list(lobbying$report_year, lobbying$client_uuid),
FUN = function(x) paste(x, collapse = "|"))
lobbying_firmyear <- collapse.char
# names(lobbying_firmyear) <- c("report_year", "bvdid", "client_uuid", "client_name",
#                               "report_uuid", "issue_code", "gov_entity", "issue_text",
#                               "registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
names(lobbying_firmyear) <- c("report_year", "client_uuid",
"report_uuid", "issue_code", "gov_entity", "issue_text",
"registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
# collapse.num <- aggregate(lobbying[, c("amount_num")],
#                    by=list(lobbying$report_year, lobbying$bvdid),
#                    FUN = function(x) sum(x, na.rm = T))
#lobbying_firmyear <- merge(collapse.char, collapse.num)
lobbying_firmyear$n_issue_codes <- str_count(lobbying_firmyear$issue_code, "\\|") + 1
###
rm(list = setdiff(ls(), "lobbying_firmyear"))
View(lobbying_firmyear)
lobby_client <- fread("data/01_raw/lobbyview/dataset___client_level.csv")
lobby_text <- fread("data/01_raw/lobbyview/dataset___issue_text.csv")
lobby_issue <- fread("data/01_raw/lobbyview/dataset___issue_level.csv")
lobby_report <- fread("data/01_raw/lobbyview/dataset___report_level.csv")
lobby_report$n_quarters <- str_count(as.character(lobby_report$report_quarter_code), "")
#####
## remove nuisance characters
lobby_issue$gov_entity <- gsub('"|\\{|\\}|([\\])|-', ' ', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub(',', ';', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub("\\s+", " ", lobby_issue$gov_entity) # remove redundant spaces
lobby_issue$gov_entity <- trimws(lobby_issue$gov_entity)
## remove special escape characters
lobby_text$issue_text <- gsub("[^A-z0-9. ]", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("`|\\^|\\[|\\]|\\\\|_", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("\\s+", " ", lobby_text$issue_text) # remove redundant spaces
lobby_issuetext <- merge(lobby_issue, lobby_text)
## sometimes multiple issue codes or government entities per lobby report
#View(lobby_issue[duplicated(lobby_issue$report_uuid) | duplicated(lobby_issue$report_uuid, fromLast = T),])
lobby_issuetext_nodup <- aggregate(lobby_issuetext[, c("issue_code", "gov_entity", "issue_text")],
by=list(lobby_issuetext$report_uuid),
FUN=function(x) paste(x, collapse = ";")) |>
setNames(c("report_uuid", "issue_code", "gov_entity", "issue_text"))
#####
lobbying <- merge(lobby_report, lobby_issuetext_nodup, all.x = T)
lobbying <- merge(lobbying, lobby_client, by = "client_uuid", all.x = T)
lobbying$report_quarter_code <- as.character(lobbying$report_quarter_code)
lobbying$amount <- gsub("\\$|,", "", lobbying$amount)
## we match with firm data based on BvDID, so all clients under the same bvdid are assigned a consistent name
## here I want to collapse the lobbying data to the FIRM-year level - which would mean no duplication of client_uuid-year-bvdid (remove client_uuid)
## just treat lobbying amount as zero if missing -> wont affect the amount calculations, because
## missing would just be dropped. But makes the mapply easier
lobbying$amount[which(lobbying$amount=="")] <- 0
lobbying$gov_entity[lobbying$gov_entity==""] <- NA
# collapse.char <- aggregate(lobbying[, c("client_uuid", "client_name", "report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
#                   by=list(lobbying$report_year, lobbying$bvdid),
#                   FUN = function(x) paste(x, collapse = "|"))
collapse.char <- aggregate(lobbying[, c("report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
by=list(lobbying$report_year, lobbying$client_uuid),
FUN = function(x) paste(x, collapse = "|"))
lobbying_firmyear <- collapse.char
# names(lobbying_firmyear) <- c("report_year", "bvdid", "client_uuid", "client_name",
#                               "report_uuid", "issue_code", "gov_entity", "issue_text",
#                               "registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
names(lobbying_firmyear) <- c("report_year", "client_uuid",
"report_uuid", "issue_code", "gov_entity", "issue_text",
"registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
# collapse.num <- aggregate(lobbying[, c("amount_num")],
#                    by=list(lobbying$report_year, lobbying$bvdid),
#                    FUN = function(x) sum(x, na.rm = T))
#lobbying_firmyear <- merge(collapse.char, collapse.num)
lobbying_firmyear$n_issue_codes <- str_count(lobbying_firmyear$issue_code, "\\|") + 1
View(lobby_client)
View(lobby_report)
#exposure_orbis_wide <- read.csv("data/02_processed/exposure_orbis_client_wide_REVISE.csv", stringsAsFactors = F)
exposure_orbis_long <- read.csv("data/02_processed/exposure_orbis_client_long_REVISE.csv", stringsAsFactors = F)
View(exposure_orbis_long)
View(exposure_orbis_long)
View(exposure_orbis_long)
steris <- exposure_orbis_long|>filter(grepl(client_name, "STERIS"))
steris <- exposure_orbis_long|>filter(str_detect(client_name, "STERIS"))
View(steris)
steris <- exposure_orbis_long|>filter(str_detect(client_name, "STERIS PLC"))
steris <- exposure_orbis_long|>filter(str_detect(client_name, "STERIS"))
View(steris)
esterline <- exposure_orbis_long|>filter(str_detect(client_name, "esterline"))
esterline <- exposure_orbis_long|>filter(str_detect(client_name, "ESTERL"))
View(esterline)
## load annual exposure data
exposurey <- read.csv("01_raw/exposure/cc_firmyear_2021Q4_03082021_OSF.csv", stringsAsFactors = F)
if(Sys.info()["user"]=="vincentheddesheimer" ) {setwd("/Users/vincentheddesheimer/Dropbox (Princeton)/BBH/BBH1/data")}
## load annual exposure data
exposurey <- read.csv("01_raw/exposure/cc_firmyear_2021Q4_03082021_OSF.csv", stringsAsFactors = F)
## drop firms without a one-to-one mapping from gvkey to isin
#exposurey <- exposurey[which( !((duplicated(exposurey[, c("gvkey", "year")]) | duplicated(exposurey[, c("gvkey", "year")], fromLast=T)) & !is.na(exposurey$gvkey)) ), ]
exposure_cs <- exposurey[, c("gvkey", "isin", "hqcountrycode")]
exposure_cs <- exposure_cs[!duplicated(exposure_cs) , ]
## this is just to collapse down from year-firm level to cross-sectional (not repeated across years)
#View(exposure_cs[(duplicated(exposure_cs$gvkey) | duplicated(exposure_cs$gvkey, fromLast=T)) & !is.na(exposure_cs$gvkey), ])
#View(exposure_cs[(duplicated(exposure_cs$isin) | duplicated(exposure_cs$isin, fromLast=T)) & !is.na(exposure_cs$isin), ])
#exposure_cs <- exposure_cs[!(is.na(exposure_cs$gvkey & is.na(exposure_cs$isin))), ]
## doesnt look like there are any cases where the gvkey AND isin are both missing
## drop cases in which the gvkey OR isin is duplicated, and they are NOT NA.
## duplication implies that a single isin code corresponds to multiple gvkey/bvdids.
## keeping these would mean that we are using a single row of Orbis firm data for
## MULTIPLE lobbyview rows. Might keep these for robustness check later, but drop now for main (~600 rows).
## (aside: we want to keep cases if ONE is NA, because we might still be able to match on the OTHER)
duplicate_gvkey <- (duplicated(exposure_cs$gvkey) | duplicated(exposure_cs$gvkey, fromLast=T)) & !is.na(exposure_cs$gvkey)
duplicate_isin <- (duplicated(exposure_cs$isin) | duplicated(exposure_cs$isin, fromLast=T)) & !is.na(exposure_cs$isin)
exposure_cs <- exposure_cs[!(duplicate_gvkey | duplicate_isin), ]
## reshape main exposure data from long to wide - we want all the variables, but
## just for the subset of firms we identified above
exposurey <- exposurey[, !names(exposurey) %in% c("gvkey", "hqcountrycode")] # omitting gvkey and hq code so they arent repeated
exposurey_wide <- reshape(exposurey, idvar = "isin", timevar = "year", direction = "wide", sep = "_")
exposurey_wide <- merge(exposurey_wide, exposure_cs) # only keep firms with isin in exposure_cs (legit candidates)
## ^ this is the set of possible firms from the Sautner data (12786 total) - prioritize maximizing number of
## these firms with matches in Orbis
rm(list = setdiff(ls(), "exposurey_wide")) # exposurey_wide all we need to keep from above
#####
## read in orbis firm covariate data
orbis <- read.csv("02_processed/orbis_11_06_2023.csv", stringsAsFactors = F)
orbis <- orbis[!is.na(orbis$isin), ] # since merging with sautner on isin, no need for NA isin rows
# sum(duplicated(orbis$isin))
## no duplicated isins in orbis
## merge orbis with
exposure_orbis_wide <- merge(exposurey_wide, orbis, by="isin")
## matches with 12009 of 12786 possible matches - pretty good
## revisit this later -- look at the nonmatches and see if any closeness
#####
# a <- exposurey_wide$isin[which(!exposurey_wide$isin %in% exposure_orbis_wide$isin)]
# b <- orbis$isin[which(!orbis$isin %in% exposure_orbis_wide$isin)]
# View(data.frame(sort(unique(a))))
# View(data.frame(sort(unique(b))))
# matches.out <- fastLink(dfA = exposurey_wide[which(!exposurey_wide$isin %in% exposure_orbis_wide$isin), ], dfB = orbis, varnames = c("isin"), threshold.match = 0.5)
## no success with fuzzy matches, even when lowering the threshold
#####
rm(list = setdiff(ls(), c("exposure_orbis_wide")))
## exposurey_wide all we need to keep from above. These are now the "candidate"
## firms - those we could link across sautner-orbis. Want to maximize matches with
## this set of firms and lobbyview
#####
## load in lobbyview
lobby_client <- read.csv("01_raw/lobbyview/dataset___client_level.csv", stringsAsFactors = F)
## convert empty bvdid to NA -
lobby_client$bvdid[which(lobby_client$bvdid=="")] <- NA
## drop lobby rows where both bvdid and gvkey missing - no chance of matching these
## with sautner-orbis
lobby_client <- lobby_client[which(!(is.na(lobby_client$bvdid) & is.na(lobby_client$gvkey))), ]
######
## no na bvdids in exposure_orbis_wide - no concerns with merging on this var
sum(is.na(exposure_orbis_wide$bvdid))
sum(exposure_orbis_wide$bvdid=="")
## NA bvdids in lobby_client data could screw up when were merging on that variable.
## replace NAs with "-1", because this value isnt present in lobbyview. So it will render these
## obsolete
## (but we dont want to drop these rows, because the gvkey could still be valuable)
lobby_client$bvdid[is.na(lobby_client$bvdid)] <- "-1"
## same logic for gvkeys
exposure_orbis_wide$gvkey[is.na(exposure_orbis_wide$gvkey)] <- (-1)
#exposure_orbis_wide$gvkey[is.na(exposure_orbis_wide$gvkey)] <- (-2) # use different value for NAs - otherwise would match on this
## have properly accounted for the possibility of NAs in merging variables.
## merge exposure_orbis and lobbyview by bvdid (drop gvkey from lobby to avoid multiple variables with same name)
a <- merge(exposure_orbis_wide, lobby_client[,names(lobby_client)!="gvkey"], by="bvdid", all.x=T)
## we are keeping ALL exposure-orbis rows. This is based on our assumption that all firms which we cannot match
## with lobbyview did NOT lobby at all. We still keep these data in our sample, and treat lobbying amount and
## presence as all zeroes. Pretty confident there is no duplication of data here, because these guys get no
## lobbying data, and we are dealing with duplicated bvdid or gvkeys already.
## merge exposure_orbis and lobbyview by gvkey
b <- merge(exposure_orbis_wide, lobby_client[,names(lobby_client)!="bvdid"], by="gvkey")
## align column names in gvkey matches with those of bvdid matches -> for merging
b <- b[,names(a)]
d <- rbind(a, b) # stack the two datasets together - then drop duplicates
# set working directory
if(Sys.info()["user"]=="vincentheddesheimer" ) {setwd("~/Dropbox (Princeton)/BBH/BBH1")}
if(Sys.info()["user"]=="christianbaehr" ) {setwd("/Users/christianbaehr/Dropbox/BBH/BBH1/")}
# load lobbying data
lobby_client <- fread("data/01_raw/lobbyview/dataset___client_level.csv")
lobby_text <- fread("data/01_raw/lobbyview/dataset___issue_text.csv")
lobby_issue <- fread("data/01_raw/lobbyview/dataset___issue_level.csv")
lobby_report <- fread("data/01_raw/lobbyview/dataset___report_level.csv")
lobby_report$n_quarters <- str_count(as.character(lobby_report$report_quarter_code), "")
#####
## remove nuisance characters
lobby_issue$gov_entity <- gsub('"|\\{|\\}|([\\])|-', ' ', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub(',', ';', lobby_issue$gov_entity)
lobby_issue$gov_entity <- gsub("\\s+", " ", lobby_issue$gov_entity) # remove redundant spaces
lobby_issue$gov_entity <- trimws(lobby_issue$gov_entity)
## remove special escape characters
lobby_text$issue_text <- gsub("[^A-z0-9. ]", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("`|\\^|\\[|\\]|\\\\|_", " ", lobby_text$issue_text)
lobby_text$issue_text <- gsub("\\s+", " ", lobby_text$issue_text) # remove redundant spaces
lobby_issuetext <- merge(lobby_issue, lobby_text)
## sometimes multiple issue codes or government entities per lobby report
#View(lobby_issue[duplicated(lobby_issue$report_uuid) | duplicated(lobby_issue$report_uuid, fromLast = T),])
lobby_issuetext_nodup <- aggregate(lobby_issuetext[, c("issue_code", "gov_entity", "issue_text")],
by=list(lobby_issuetext$report_uuid),
FUN=function(x) paste(x, collapse = ";")) |>
setNames(c("report_uuid", "issue_code", "gov_entity", "issue_text"))
#####
lobbying <- merge(lobby_report, lobby_issuetext_nodup, all.x = T)
lobbying <- merge(lobbying, lobby_client, by = "client_uuid", all.x = T)
lobbying$report_quarter_code <- as.character(lobbying$report_quarter_code)
lobbying$amount <- gsub("\\$|,", "", lobbying$amount)
## we match with firm data based on BvDID, so all clients under the same bvdid are assigned a consistent name
## here I want to collapse the lobbying data to the FIRM-year level - which would mean no duplication of client_uuid-year-bvdid (remove client_uuid)
## just treat lobbying amount as zero if missing -> wont affect the amount calculations, because
## missing would just be dropped. But makes the mapply easier
lobbying$amount[which(lobbying$amount=="")] <- 0
lobbying$gov_entity[lobbying$gov_entity==""] <- NA
# collapse.char <- aggregate(lobbying[, c("client_uuid", "client_name", "report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
#                   by=list(lobbying$report_year, lobbying$bvdid),
#                   FUN = function(x) paste(x, collapse = "|"))
collapse.char <- aggregate(lobbying[, c("report_uuid", "issue_code", "gov_entity", "issue_text", "registrant_uuid", "registrant_name", "report_quarter_code", "amount")],
by=list(lobbying$report_year, lobbying$client_uuid),
FUN = function(x) paste(x, collapse = "|"))
lobbying_firmyear <- collapse.char
# names(lobbying_firmyear) <- c("report_year", "bvdid", "client_uuid", "client_name",
#                               "report_uuid", "issue_code", "gov_entity", "issue_text",
#                               "registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
names(lobbying_firmyear) <- c("report_year", "client_uuid",
"report_uuid", "issue_code", "gov_entity", "issue_text",
"registrant_uuid", "registrant_name", "report_quarter_code", "amount_num")
# collapse.num <- aggregate(lobbying[, c("amount_num")],
#                    by=list(lobbying$report_year, lobbying$bvdid),
#                    FUN = function(x) sum(x, na.rm = T))
#lobbying_firmyear <- merge(collapse.char, collapse.num)
lobbying_firmyear$n_issue_codes <- str_count(lobbying_firmyear$issue_code, "\\|") + 1
## any appearance of climate issues in a year
lobbying_firmyear$CLI_annual <- grepl("ENV|CAW|ENG|FUE", lobbying_firmyear$issue_code)
## now look by quarter -> first step is to break up the issue code and report_quarter_code
## for each lobbying report. Second step is to look for coincidences of quarter i and
## climate-related issue codes in that quarter
issue_code_split <- lapply(lobbying_firmyear$issue_code, FUN = function(x) strsplit(x, "\\|")[[1]])
quarters <- lapply(lobbying_firmyear$report_quarter_code, FUN = function(x) strsplit(x, "\\|")[[1]])
## determine whether climate mentioned in a given report, by firm-year. This produces
## a vector of T/F values for EACH firm-year, one for each lobbying report in that firm-year
climate_issue <- lapply(issue_code_split, FUN = function(x) grepl("ENV|CAW|ENG|FUE", x))
## now produce a vector of T/F for each firm-year indicating if quarter i is mentioned in
## a given report
q1 <- lapply(quarters, FUN = function(x) grepl("1", x))
q2 <- lapply(quarters, FUN = function(x) grepl("2", x))
q3 <- lapply(quarters, FUN = function(x) grepl("3", x))
q4 <- lapply(quarters, FUN = function(x) grepl("4", x))
## now iterate through both the climate dummy list and quarter dummy list. Co-occurences
## of climate TRUE and quarter TRUE implies firm-year lobbied on climate in quarter i
lobbying_firmyear$CLI_q1 <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, q1)
lobbying_firmyear$CLI_q2 <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, q2)
lobbying_firmyear$CLI_q3 <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, q3)
lobbying_firmyear$CLI_q4 <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, q4)
## for each row, we compute whether for any lobbying reports A) the report is about a climate issue
## AND B) the report is for qX . If any reports for that firm-year meet this criteria, they get a TRUE; else FALSE.
gov_entity_split <- lapply(lobbying_firmyear$gov_entity, FUN = function(x) strsplit(x, "\\|")[[1]])
doe <- lapply(gov_entity_split, FUN = function(x) grepl("DEPARTMENT OF ENERGY", x))
epa <- lapply(gov_entity_split, FUN = function(x) grepl("ENVIRONMENTAL PROTECTION AGENCY", x))
lobbying_firmyear$CLI_DOE_annual <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, doe)
lobbying_firmyear$CLI_EPA_annual <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, epa)
# lobbying_firmyear$gov_entity[900]
# gov_entity_split[900]
# doe[900]
# epa[900]
# issue_code_split[900]
# climate_issue[900]
# lobbying_firmyear$CLI_DOE_annual[900]
# lobbying_firmyear$CLI_EPA_annual[900]
# lobbying_firmyear$CLI_EPA_annual[180]
# test <- mapply(FUN = function(x1, x2) {any(length(x1) != length(x2))}, climate_issue, epa)
# which(test)[1:10]
# lobbying_firmyear$gov_entity[1]
# lobbying_firmyear$issue_code[1]
#summary(lobbying_firmyear$CLI_annual)
#summary(lobbying_firmyear$CLI_q1 | lobbying_firmyear$CLI_q2 | lobbying_firmyear$CLI_q3 | lobbying_firmyear$CLI_q4)
## same distro of T/F values as should be
## now move on to AMOUNT
## for each report in a firm-year, we compute the proportion of issues in that REPORT
## that are climate-related.
climate_issue_proportion <- lapply(issue_code_split, FUN = function(x) {sapply(strsplit(x, ";"), FUN = function(y) {mean(grepl("ENV|CAW|ENG|FUE", y))}[[1]])})
amount_split <- lapply(lobbying_firmyear$amount, FUN = function(x) strsplit(x, "\\|")[[1]])
climate_amount <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1) * x2)}, amount_split, climate_issue_proportion)
## we divide the total sum by the NUMBER OF ISSUES IN THE REPORT. I thus assume
## lobbying dollars are divided evenly among activities in a report
lobbying_firmyear$CLI_amount_annual <- climate_amount
## we divide the total sum by the NUMBER OF ISSUES IN THE REPORT. I thus assume
## lobbying dollars are divided evenly among activities in a report
## to do for annual was easy - just needed to compute the proportion of issues that
## were climate for each report, then scale it by the dollar amount.
#gov_entity_split <- lapply(lobbying_firmyear$gov_entity, FUN = function(x) strsplit(x, "\\|")[[1]])
#doe <- lapply(gov_entity_split, FUN = function(x) grepl("DEPARTMENT OF ENERGY", x))
#epa <- lapply(gov_entity_split, FUN = function(x) grepl("ENVIRONMENTAL PROTECTION AGENCY", x))
#lobbying_firmyear$CLI_DOE_annual <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, doe)
#lobbying_firmyear$CLI_EPA_annual <- mapply(FUN = function(x1, x2) {any(x1 & x2)}, climate_issue, epa)
doe_proportion <- lapply(gov_entity_split, FUN = function(x) {sapply(strsplit(x, ";"), FUN = function(y) {mean(grepl("DEPARTMENT OF ENERGY", y))}[[1]])})
epa_proportion <- lapply(gov_entity_split, FUN = function(x) {sapply(strsplit(x, ";"), FUN = function(y) {mean(grepl("ENVIRONMENTAL PROTECTION AGENCY", y))}[[1]])})
## scale report amount by the product of a) proportion of issues in the report that are climate
## and b) proportion of gov entities in the report that are DOE (EPA)
doe_amount <- mapply(FUN = function(x1, x2, x3) {sum(as.numeric(x1) * x2 * x3)}, amount_split, climate_issue_proportion, doe_proportion)
epa_amount <- mapply(FUN = function(x1, x2, x3) {sum(as.numeric(x1) * x2 * x3)}, amount_split, climate_issue_proportion, epa_proportion)
lobbying_firmyear$CLI_DOE_amount_annual <- doe_amount
lobbying_firmyear$CLI_EPA_amount_annual <- epa_amount
# amount_split[900]
# climate_issue[900]
# climate_issue_proportion[900]
# epa_proportion[900]
# epa_amount[900]
# doe_amount[900]
# lobbying_firmyear$gov_entity[900]
# gov_entity_split[900]
# doe[900]
# epa[900]
# issue_code_split[900]
# climate_issue[900]
# lobbying_firmyear$CLI_DOE_annual[900]
# lobbying_firmyear$CLI_EPA_annual[900]
# lobbying_firmyear$CLI_EPA_annual[180]
## it is trickier to do for quarterly, because now we need to break down by report
## and determine if each report is in the quarter of interest
## for each REPORT, we compute the proportion that are environmental. Then,
## if the report is for a single quarter, we only scale the amount for that report
## by the environmental issue proportion. If there are TWO quarters in the report, then
## we scale the amount by 1/2 times the environmental issue proportion, and 1/4 for FOUR quarters.
## proportion of each report that is q1
q1_proportion <- lapply(quarters, FUN = function(x) {grepl("1", x) * (1/(str_count(x, "|")-1))})
q2_proportion <- lapply(quarters, FUN = function(x) {grepl("2", x) * (1/(str_count(x, "|")-1))})
q3_proportion <- lapply(quarters, FUN = function(x) {grepl("3", x) * (1/(str_count(x, "|")-1))})
q4_proportion <- lapply(quarters, FUN = function(x) {grepl("4", x) * (1/(str_count(x, "|")-1))})
## product of q1 * "climate issue" proportion
total_proportion_q1 <- mapply(FUN = function(x1, x2) {x1*x2}, q1_proportion, climate_issue_proportion)
total_proportion_q2 <- mapply(FUN = function(x1, x2) {x1*x2}, q2_proportion, climate_issue_proportion)
total_proportion_q3 <- mapply(FUN = function(x1, x2) {x1*x2}, q3_proportion, climate_issue_proportion)
total_proportion_q4 <- mapply(FUN = function(x1, x2) {x1*x2}, q4_proportion, climate_issue_proportion)
## product of report dollar amount and the compound proportion scalar
climate_amount_q1 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1)*x2, na.rm=T)}, amount_split, total_proportion_q1)
climate_amount_q2 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1)*x2, na.rm=T)}, amount_split, total_proportion_q2)
climate_amount_q3 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1)*x2, na.rm=T)}, amount_split, total_proportion_q3)
climate_amount_q4 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1)*x2, na.rm=T)}, amount_split, total_proportion_q4)
## we scale the total sum by the NUMBER OF ISSUES IN THE REPORT. I thus assume
## lobbying dollars are divided evenly among activities in a report, and that
## if lobbying occurred across multiple quarters it was uniform across those quarters
lobbying_firmyear$CLI_amount_q1 <- climate_amount_q1
lobbying_firmyear$CLI_amount_q2 <- climate_amount_q2
lobbying_firmyear$CLI_amount_q3 <- climate_amount_q3
lobbying_firmyear$CLI_amount_q4 <- climate_amount_q4
#####
total_lobby_annual <- sapply(amount_split, FUN = function(x) sum(as.numeric(x), na.rm=T))
lobbying_firmyear$total_lobby_annual <- total_lobby_annual
total_lobby_q1 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1) * x2)}, amount_split, q1_proportion)
total_lobby_q2 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1) * x2)}, amount_split, q2_proportion)
total_lobby_q3 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1) * x2)}, amount_split, q3_proportion)
total_lobby_q4 <- mapply(FUN = function(x1, x2) {sum(as.numeric(x1) * x2)}, amount_split, q4_proportion)
lobbying_firmyear$total_lobby_q1 <- total_lobby_q1
lobbying_firmyear$total_lobby_q2 <- total_lobby_q2
lobbying_firmyear$total_lobby_q3 <- total_lobby_q3
lobbying_firmyear$total_lobby_q4 <- total_lobby_q4
#exposure_orbis_wide <- read.csv("data/02_processed/exposure_orbis_client_wide_REVISE.csv", stringsAsFactors = F)
exposure_orbis_long <- read.csv("data/02_processed/exposure_orbis_client_long_REVISE.csv", stringsAsFactors = F)
rm(a)
rm(b)
rm(amount_split)
rm(climate_issue_proportion)
rm(collapse.char)
rm(doe)
rm(doe_proportion)
rm(epa)
rm(epa_proportion)
rm(exposure_orbis_wide)
rm(gov_entity_split)
rm(issue_code_split)
rm(lobby_issuetext_nodup)
rm(q1)
rm(q2)
rm(q1_proportion)
rm(q2_proportion)
View(lobby_report)
View(exposure_orbis_long)
View(d)
names(d)
inspect <- d |> filter(str_detect(conm, "Dover"))
inspect <- d |> filter(str_detect(conm, "DOVER"))
View(inspect)
inspect <- d |> filter(str_detect(conm, "DOVER")) |> arrange(conm, year)
inspect <- d |> filter(str_detect(conm, "DOVER"))
inspect <- d |> filter(str_detect(conm, "DOVER")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "ESTERLINE")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "AMERIG")) |> relocate(conm, 1)
View(inspect)
inspect <- d |> filter(str_detect(conm, "AMERIGROUP CORPORATION
")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "AMERIGROUP CORPORATION")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "FORREST")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "FOREST INV")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "TIVO SOLU")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "TIVO")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "TIVO CORPORATION")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "PEPSI")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "IQV")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "PROGRESS")) |> relocate(conm, 1)
View(inspect)
inspect <- d |> filter(str_detect(conm, "ARRIS")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "TETRA")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "TETRA T")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "OLD API")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "APPAL")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "FLUOR")) |> relocate(conm, 1)
inspect <- d |> filter(str_detect(conm, "CAL DIVE")) |> relocate(conm, 1)
glimpse(inspect)
inspect <- d |> filter(str_detect(conm, "HELIX")) |> relocate(conm, 1)
glimpse(inspect)
